%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%          ###########   ###########   ##########    ##########           %
%         ############  ############  ############  ############          %
%         ##            ##            ##   ##   ##  ##        ##          %
%         ##            ##            ##   ##   ##  ##        ##          %
%         ###########   ####  ######  ##   ##   ##  ##    ######          %
%          ###########  ####  #       ##   ##   ##  ##    #    #          %
%                   ##  ##    ######  ##   ##   ##  ##    #    #          %
%                   ##  ##    #       ##   ##   ##  ##    #    #          %
%         ############  ##### ######  ##   ##   ##  ##### ######          %
%         ###########    ###########  ##   ##   ##   ##########           %
%                                                                         %
%            S E C U R E   M O B I L E   N E T W O R K I N G              %
%                                                                         %
% License:                                                                %
%                                                                         %
% Copyright (c) 2018 Matthias Schulz                                      %
%                                                                         %
% Permission is hereby granted, free of charge, to any person obtaining a %
% copy of this software and associated documentation files (the           %
% "Software"), to deal in the Software without restriction, including     %
% without limitation the rights to use, copy, modify, merge, publish,     %
% distribute, sublicense, and/or sell copies of the Software, and to      %
% permit persons to whom the Software is furnished to do so, subject to   %
% the following conditions:                                               %
%                                                                         %
% 1. The above copyright notice and this permission notice shall be       %
%    include in all copies or substantial portions of the Software.       %
%                                                                         %
% 2. Any use of the Software which results in an academic publication or  %
%    other publication which includes a bibliography must include         %
%    citations to the nexmon project a) and the paper cited under b) or   %
%    the thesis cited under c):                                           %
%                                                                         %
%    a) "Matthias Schulz, Daniel Wegemer and Matthias Hollick. Nexmon:    %
%        The C-based Firmware Patching Framework. https://nexmon.org"     %
%                                                                         %
%    b) "Matthias Schulz, Jakob Link, Francesco Gringoli, and Matthias    %
%        Hollick. Shadow Wi-Fi: Teaching Smart- phones to Transmit Raw    %
%        Signals and to Extract Channel State Information to Implement    %
%        Practical Covert Channels over Wi-Fi. Accepted to appear in      %
%        Proceedings of the 16th ACM International Conference on Mobile   %
%        Systems, Applications, and Services (MobiSys 2018), June 2018."  %
%                                                                         %
%    c) "Matthias Schulz. Teaching Your Wireless Card New Tricks:         %
%        Smartphone Performance and Security Enhancements through Wi-Fi   %
%        Firmware Modifications. Dr.-Ing. thesis, Technische Universit√§t  %
%        Darmstadt, Germany, February 2018."                              %
%                                                                         %
% 3. The Software is not used by, in cooperation with, or on behalf of    %
%    any armed forces, intelligence agencies, reconnaissance agencies,    %
%    defense agencies, offense agencies or any supplier, contractor, or   %
%    research associated.                                                 %
%                                                                         %
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS %
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF              %
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  %
% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    %
% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    %
% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       %
% SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [ out ] = modx( x, in )
    switch x
        case 2
            out = mod2(in);
        case 4
            out = mod4(in);
        case 16
            out = mod16(in);
        case 64
            out = mod64(in);
        case 256
            out = mod256(in);
        otherwise
            out = [];
    end
end

function [ out ] = mod2( in )
    map = ...
        [    -1;
             1];
         
    out = map(in+1);
end

function [ out ] = mod4( in )
    map = ...
        conj([ -1.0000 + 1.0000i;
          -1.0000 - 1.0000i;
           1.0000 + 1.0000i;
           1.0000 - 1.0000i])/sqrt(2);
         
    out = map(in+1);
end

function [ out ] = mod16( in )
    map = ...
        conj([ -1.0000 + 1.0000i;
          -1.0000 + 0.3333i;
          -1.0000 - 1.0000i;
          -1.0000 - 0.3333i;
          -0.3333 + 1.0000i;
          -0.3333 + 0.3333i;
          -0.3333 - 1.0000i;
          -0.3333 - 0.3333i;
           1.0000 + 1.0000i;
           1.0000 + 0.3333i;
           1.0000 - 1.0000i;
           1.0000 - 0.3333i;
           0.3333 + 1.0000i;
           0.3333 + 0.3333i;
           0.3333 - 1.0000i;
           0.3333 - 0.3333i])*3/sqrt(10);
         
    out = map(in+1);
end

function [ out ] = mod64( in )
    map = ...
        conj([ -1.0000 + 1.0000i;
          -1.0000 + 0.7143i;
          -1.0000 + 0.1429i;
          -1.0000 + 0.4286i;
          -1.0000 - 1.0000i;
          -1.0000 - 0.7143i;
          -1.0000 - 0.1429i;
          -1.0000 - 0.4286i;
          -0.7143 + 1.0000i;
          -0.7143 + 0.7143i;
          -0.7143 + 0.1429i;
          -0.7143 + 0.4286i;
          -0.7143 - 1.0000i;
          -0.7143 - 0.7143i;
          -0.7143 - 0.1429i;
          -0.7143 - 0.4286i;
          -0.1429 + 1.0000i;
          -0.1429 + 0.7143i;
          -0.1429 + 0.1429i;
          -0.1429 + 0.4286i;
          -0.1429 - 1.0000i;
          -0.1429 - 0.7143i;
          -0.1429 - 0.1429i;
          -0.1429 - 0.4286i;
          -0.4286 + 1.0000i;
          -0.4286 + 0.7143i;
          -0.4286 + 0.1429i;
          -0.4286 + 0.4286i;
          -0.4286 - 1.0000i;
          -0.4286 - 0.7143i;
          -0.4286 - 0.1429i;
          -0.4286 - 0.4286i;
           1.0000 + 1.0000i;
           1.0000 + 0.7143i;
           1.0000 + 0.1429i;
           1.0000 + 0.4286i;
           1.0000 - 1.0000i;
           1.0000 - 0.7143i;
           1.0000 - 0.1429i;
           1.0000 - 0.4286i;
           0.7143 + 1.0000i;
           0.7143 + 0.7143i;
           0.7143 + 0.1429i;
           0.7143 + 0.4286i;
           0.7143 - 1.0000i;
           0.7143 - 0.7143i;
           0.7143 - 0.1429i;
           0.7143 - 0.4286i;
           0.1429 + 1.0000i;
           0.1429 + 0.7143i;
           0.1429 + 0.1429i;
           0.1429 + 0.4286i;
           0.1429 - 1.0000i;
           0.1429 - 0.7143i;
           0.1429 - 0.1429i;
           0.1429 - 0.4286i;
           0.4286 + 1.0000i;
           0.4286 + 0.7143i;
           0.4286 + 0.1429i;
           0.4286 + 0.4286i;
           0.4286 - 1.0000i;
           0.4286 - 0.7143i;
           0.4286 - 0.1429i;
           0.4286 - 0.4286i])*7/sqrt(42);
         
    out = map(in+1);
end

function [ out ] = mod256( in )
    map = ...
        conj([ -1.0000 + 1.0000i;
          -1.0000 + 0.8667i;
          -1.0000 + 0.6000i;
          -1.0000 + 0.7333i;
          -1.0000 + 0.0667i;
          -1.0000 + 0.2000i;
          -1.0000 + 0.4667i;
          -1.0000 + 0.3333i;
          -1.0000 - 1.0000i;
          -1.0000 - 0.8667i;
          -1.0000 - 0.6000i;
          -1.0000 - 0.7333i;
          -1.0000 - 0.0667i;
          -1.0000 - 0.2000i;
          -1.0000 - 0.4667i;
          -1.0000 - 0.3333i;
          -0.8667 + 1.0000i;
          -0.8667 + 0.8667i;
          -0.8667 + 0.6000i;
          -0.8667 + 0.7333i;
          -0.8667 + 0.0667i;
          -0.8667 + 0.2000i;
          -0.8667 + 0.4667i;
          -0.8667 + 0.3333i;
          -0.8667 - 1.0000i;
          -0.8667 - 0.8667i;
          -0.8667 - 0.6000i;
          -0.8667 - 0.7333i;
          -0.8667 - 0.0667i;
          -0.8667 - 0.2000i;
          -0.8667 - 0.4667i;
          -0.8667 - 0.3333i;
          -0.6000 + 1.0000i;
          -0.6000 + 0.8667i;
          -0.6000 + 0.6000i;
          -0.6000 + 0.7333i;
          -0.6000 + 0.0667i;
          -0.6000 + 0.2000i;
          -0.6000 + 0.4667i;
          -0.6000 + 0.3333i;
          -0.6000 - 1.0000i;
          -0.6000 - 0.8667i;
          -0.6000 - 0.6000i;
          -0.6000 - 0.7333i;
          -0.6000 - 0.0667i;
          -0.6000 - 0.2000i;
          -0.6000 - 0.4667i;
          -0.6000 - 0.3333i;
          -0.7333 + 1.0000i;
          -0.7333 + 0.8667i;
          -0.7333 + 0.6000i;
          -0.7333 + 0.7333i;
          -0.7333 + 0.0667i;
          -0.7333 + 0.2000i;
          -0.7333 + 0.4667i;
          -0.7333 + 0.3333i;
          -0.7333 - 1.0000i;
          -0.7333 - 0.8667i;
          -0.7333 - 0.6000i;
          -0.7333 - 0.7333i;
          -0.7333 - 0.0667i;
          -0.7333 - 0.2000i;
          -0.7333 - 0.4667i;
          -0.7333 - 0.3333i;
          -0.0667 + 1.0000i;
          -0.0667 + 0.8667i;
          -0.0667 + 0.6000i;
          -0.0667 + 0.7333i;
          -0.0667 + 0.0667i;
          -0.0667 + 0.2000i;
          -0.0667 + 0.4667i;
          -0.0667 + 0.3333i;
          -0.0667 - 1.0000i;
          -0.0667 - 0.8667i;
          -0.0667 - 0.6000i;
          -0.0667 - 0.7333i;
          -0.0667 - 0.0667i;
          -0.0667 - 0.2000i;
          -0.0667 - 0.4667i;
          -0.0667 - 0.3333i;
          -0.2000 + 1.0000i;
          -0.2000 + 0.8667i;
          -0.2000 + 0.6000i;
          -0.2000 + 0.7333i;
          -0.2000 + 0.0667i;
          -0.2000 + 0.2000i;
          -0.2000 + 0.4667i;
          -0.2000 + 0.3333i;
          -0.2000 - 1.0000i;
          -0.2000 - 0.8667i;
          -0.2000 - 0.6000i;
          -0.2000 - 0.7333i;
          -0.2000 - 0.0667i;
          -0.2000 - 0.2000i;
          -0.2000 - 0.4667i;
          -0.2000 - 0.3333i;
          -0.4667 + 1.0000i;
          -0.4667 + 0.8667i;
          -0.4667 + 0.6000i;
          -0.4667 + 0.7333i;
          -0.4667 + 0.0667i;
          -0.4667 + 0.2000i;
          -0.4667 + 0.4667i;
          -0.4667 + 0.3333i;
          -0.4667 - 1.0000i;
          -0.4667 - 0.8667i;
          -0.4667 - 0.6000i;
          -0.4667 - 0.7333i;
          -0.4667 - 0.0667i;
          -0.4667 - 0.2000i;
          -0.4667 - 0.4667i;
          -0.4667 - 0.3333i;
          -0.3333 + 1.0000i;
          -0.3333 + 0.8667i;
          -0.3333 + 0.6000i;
          -0.3333 + 0.7333i;
          -0.3333 + 0.0667i;
          -0.3333 + 0.2000i;
          -0.3333 + 0.4667i;
          -0.3333 + 0.3333i;
          -0.3333 - 1.0000i;
          -0.3333 - 0.8667i;
          -0.3333 - 0.6000i;
          -0.3333 - 0.7333i;
          -0.3333 - 0.0667i;
          -0.3333 - 0.2000i;
          -0.3333 - 0.4667i;
          -0.3333 - 0.3333i;
           1.0000 + 1.0000i;
           1.0000 + 0.8667i;
           1.0000 + 0.6000i;
           1.0000 + 0.7333i;
           1.0000 + 0.0667i;
           1.0000 + 0.2000i;
           1.0000 + 0.4667i;
           1.0000 + 0.3333i;
           1.0000 - 1.0000i;
           1.0000 - 0.8667i;
           1.0000 - 0.6000i;
           1.0000 - 0.7333i;
           1.0000 - 0.0667i;
           1.0000 - 0.2000i;
           1.0000 - 0.4667i;
           1.0000 - 0.3333i;
           0.8667 + 1.0000i;
           0.8667 + 0.8667i;
           0.8667 + 0.6000i;
           0.8667 + 0.7333i;
           0.8667 + 0.0667i;
           0.8667 + 0.2000i;
           0.8667 + 0.4667i;
           0.8667 + 0.3333i;
           0.8667 - 1.0000i;
           0.8667 - 0.8667i;
           0.8667 - 0.6000i;
           0.8667 - 0.7333i;
           0.8667 - 0.0667i;
           0.8667 - 0.2000i;
           0.8667 - 0.4667i;
           0.8667 - 0.3333i;
           0.6000 + 1.0000i;
           0.6000 + 0.8667i;
           0.6000 + 0.6000i;
           0.6000 + 0.7333i;
           0.6000 + 0.0667i;
           0.6000 + 0.2000i;
           0.6000 + 0.4667i;
           0.6000 + 0.3333i;
           0.6000 - 1.0000i;
           0.6000 - 0.8667i;
           0.6000 - 0.6000i;
           0.6000 - 0.7333i;
           0.6000 - 0.0667i;
           0.6000 - 0.2000i;
           0.6000 - 0.4667i;
           0.6000 - 0.3333i;
           0.7333 + 1.0000i;
           0.7333 + 0.8667i;
           0.7333 + 0.6000i;
           0.7333 + 0.7333i;
           0.7333 + 0.0667i;
           0.7333 + 0.2000i;
           0.7333 + 0.4667i;
           0.7333 + 0.3333i;
           0.7333 - 1.0000i;
           0.7333 - 0.8667i;
           0.7333 - 0.6000i;
           0.7333 - 0.7333i;
           0.7333 - 0.0667i;
           0.7333 - 0.2000i;
           0.7333 - 0.4667i;
           0.7333 - 0.3333i;
           0.0667 + 1.0000i;
           0.0667 + 0.8667i;
           0.0667 + 0.6000i;
           0.0667 + 0.7333i;
           0.0667 + 0.0667i;
           0.0667 + 0.2000i;
           0.0667 + 0.4667i;
           0.0667 + 0.3333i;
           0.0667 - 1.0000i;
           0.0667 - 0.8667i;
           0.0667 - 0.6000i;
           0.0667 - 0.7333i;
           0.0667 - 0.0667i;
           0.0667 - 0.2000i;
           0.0667 - 0.4667i;
           0.0667 - 0.3333i;
           0.2000 + 1.0000i;
           0.2000 + 0.8667i;
           0.2000 + 0.6000i;
           0.2000 + 0.7333i;
           0.2000 + 0.0667i;
           0.2000 + 0.2000i;
           0.2000 + 0.4667i;
           0.2000 + 0.3333i;
           0.2000 - 1.0000i;
           0.2000 - 0.8667i;
           0.2000 - 0.6000i;
           0.2000 - 0.7333i;
           0.2000 - 0.0667i;
           0.2000 - 0.2000i;
           0.2000 - 0.4667i;
           0.2000 - 0.3333i;
           0.4667 + 1.0000i;
           0.4667 + 0.8667i;
           0.4667 + 0.6000i;
           0.4667 + 0.7333i;
           0.4667 + 0.0667i;
           0.4667 + 0.2000i;
           0.4667 + 0.4667i;
           0.4667 + 0.3333i;
           0.4667 - 1.0000i;
           0.4667 - 0.8667i;
           0.4667 - 0.6000i;
           0.4667 - 0.7333i;
           0.4667 - 0.0667i;
           0.4667 - 0.2000i;
           0.4667 - 0.4667i;
           0.4667 - 0.3333i;
           0.3333 + 1.0000i;
           0.3333 + 0.8667i;
           0.3333 + 0.6000i;
           0.3333 + 0.7333i;
           0.3333 + 0.0667i;
           0.3333 + 0.2000i;
           0.3333 + 0.4667i;
           0.3333 + 0.3333i;
           0.3333 - 1.0000i;
           0.3333 - 0.8667i;
           0.3333 - 0.6000i;
           0.3333 - 0.7333i;
           0.3333 - 0.0667i;
           0.3333 - 0.2000i;
           0.3333 - 0.4667i;
           0.3333 - 0.3333i]);
         
    out = map(in+1);
end

