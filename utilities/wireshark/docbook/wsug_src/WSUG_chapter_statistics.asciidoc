++++++++++++++++++++++++++++++++++++++
<!-- WSUG Chapter Statistics -->
++++++++++++++++++++++++++++++++++++++

[[ChStatistics]]

== Statistics

[[ChStatIntroduction]]

=== Introduction

Wireshark provides a wide range of network statistics which can be accessed via
the menu:Statistics[] menu.

These statistics range from general information about the loaded capture file
(like the number of captured packets), to statistics about specific protocols
(e.g. statistics about the number of HTTP requests and responses captured).

* General statistics:

  - *Summary* about the capture file.

  - *Protocol Hierarchy* of the captured packets.

  - *Conversations* e.g. traffic between specific IP addresses.

  - *Endpoints* e.g. traffic to and from an IP addresses.

  - *IO Graphs* visualizing the number of packets (or similar) in time.

* Protocol specific statistics:

  - *Service Response Time* between request and response of some protocols.

  - Various other protocol specific statistics.


[NOTE]
====
The protocol specific statistics require detailed knowledge about the specific
protocol. Unless you are familiar with that protocol, statistics about it will
be pretty hard to understand.
====

[[ChStatSummary]]

=== The _Summary_ window

General statistics about the current capture file.

.The "Summary" window
image::wsug_graphics/ws-stats-summary.png[]

* __File__: general information about the capture file.

* __Time__: the timestamps when the first and the last packet were captured (and
  the time between them).

* __Capture__: information from the time when the capture was done (only
  available if the packet data was captured from the network and not loaded from
  a file).

* __Display__: some display related information.

* __Traffic__: some statistics of the network traffic seen. If a display filter
  is set, you will see values in the Captured column, and if any packages are
  marked, you will see values in the Marked column. The values in the _Captured_
  column will remain the same as before, while the values in the _Displayed_
  column will reflect the values corresponding to the packets shown in the
  display. The values in the _Marked_ column will reflect the values
  corresponding to the marked packages.

[[ChStatHierarchy]]

=== The "Protocol Hierarchy" window

The protocol hierarchy of the captured packets.

.The "Protocol Hierarchy" window
image::wsug_graphics/ws-stats-hierarchy.png[]

This is a tree of all the protocols in the capture. Each row contains the
statistical values of one protocol. Two of the columns (_Percent Packets_ and
_Percent Bytes_) serve double duty as bar graphs. If a display filter is set it
will be shown at the bottom.

The button:[Copy] button will let you copy the window contents as CSV or YAML.

.Protocol hierarchy columns

_Protocol_:: This protocol's name

_Percent Packets_:: The percentage of protocol packets relative to all packets in
  the capture

_Packets_:: The total number of packets of this protocol

_Percent Bytes_:: The percentage of protocol bytes relative to the total bytes in
  the capture

_Bytes_:: The total number of bytes of this protocol

_Bits/s_:: The bandwidth of this protocol relative to the capture time

_End Packets_:: The absolute number of packets of this protocol where it
  was the highest protocol in the stack (last dissected)

_End Bytes_:: The absolute number of bytes of this protocol where it
  was the highest protocol in the stack (last dissected)

_End Bits/s_:: The bandwidth of this protocol relative to the capture time where
  was the highest protocol in the stack (last dissected)

Packets usually contain multiple protocols. As a result more than one protocol will
be counted for each packet. Example: In the screenshot IP has 99.9% and TCP
98.5% (which is together much more than 100%).

Protocol layers can consist of packets that won't contain any higher layer
protocol, so the sum of all higher layer packets may not sum up to the protocols
packet count. Example: In the screenshot TCP has 98.5% but the sum of the
subprotocols (SSL, HTTP, etc) is much less. This can be caused by continuation
frames, TCP protocol overhead, and other undissected data.

A single packet can contain the same protocol more than once. In this case, the
protocol is counted more than once. For example ICMP replies and many tunneling
protocols will carry more than one IP header.

[[ChStatConversations]]

=== Conversations

A network conversation is the traffic between two specific endpoints. For
example, an IP conversation is all the traffic between two IP addresses. The
description of the known endpoint types can be found in
<<ChStatEndpointDefinition>>.

[[ChStatConversationsWindow]]

==== The ``Conversations'' window

The conversations window is similar to the endpoint Window. See
<<ChStatEndpointsWindow>> for a description of their common features. Along with
addresses, packet counters, and byte counters the conversation window adds four
columns: the time in seconds between the start of the capture and the start of
the conversation ("Rel Start"), the duration of the conversation in seconds, and
the average bits (not bytes) per second in each direction.

.The "Conversations" window
image::wsug_graphics/ws-stats-conversations.png[scaledwidth="100%"]

Each row in the list shows the statistical values for exactly one conversation.

_Name resolution_ will be done if selected in the window and if it is active for
the specific protocol layer (MAC layer for the selected Ethernet endpoints
page). _Limit to display filter_ will only show conversations matching the
current display filter.

The button:[Copy] button will copy the list values to the clipboard in CSV
(Comma Separated Values) or YAML format. The button:[Follow Stream...] button
will show the stream contents as described in <<ChAdvFollowStream>> dialog. The
button:[Graph...] button will show a graph as described in <<ChStatIOGraphs>>.

button:[Conversation Types] lets you choose which traffic type tabs are shown.
See <<ChStatEndpointDefinition>> for a list of endpoint types. The enabled types
are saved in your profile settings.

[TIP]
====
This window will be updated frequently so it will be useful even if you open
it before (or while) you are doing a live capture.
====

// Removed:
// [[ChStatConversationListWindow]]

[[ChStatEndpoints]]

=== Endpoints

[[ChStatEndpointDefinition]]

A network endpoint is the logical endpoint of separate protocol traffic of a
specific protocol layer. The endpoint statistics of Wireshark will take the
following endpoints into account:

[TIP]
====
If you are looking for a feature other network tools call a _hostlist_, here is
the right place to look. The list of Ethernet or IP endpoints is usually what
you're looking for.
====

.Endpoint and Conversation types

_Bluetooth_:: A MAC-48 address similar to Ethernet.

_Ethernet_:: Identical to the Ethernet device's MAC-48 identifier.

_Fibre Channel_:: A MAC-48 address similar to Ethernet.

_IEEE 802.11_:: A MAC-48 address similar to Ethernet.

_FDDI_:: Identical to the FDDI MAC-48 address.

_IPv4_:: Identical to the 32-bit IPv4 address.

_IPv6_:: Identical to the 128-bit IPv6 address.

_IPX_:: A concatenation of a 32 bit network number and 48 bit node address, by
default the Ethernet interface's MAC-48 address.

_JXTA_:: A 160 bit SHA-1 URN.

_NCP_:: Similar to IPX.

_RSVP_:: A combination of varios RSVP session attributes and IPv4 addresses.

_SCTP_:: A combination of the host IP addresses (plural) and
the SCTP port used. So different SCTP ports on the same IP address are different
SCTP endpoints, but the same SCTP port on different IP addresses of the same
host are still the same endpoint.

_TCP_:: A combination of the IP address and the TCP port used.
Different TCP ports on the same IP address are different TCP endpoints.

_Token Ring_:: Identical to the Token Ring MAC-48 address.

_UDP_:: A combination of the IP address and the UDP port used, so different UDP
ports on the same IP address are different UDP endpoints.

_USB_:: Identical to the 7-bit USB address.

[NOTE]
.Broadcast and multicast endpoints
====
Broadcast and multicast traffic will be shown separately as additional
endpoints. Of course, as these aren't physical endpoints the real traffic
will be received by some or all of the listed unicast endpoints.
====

[[ChStatEndpointsWindow]]

==== The "Endpoints" window

This window shows statistics about the endpoints captured.

.The ``Endpoints'' window
image::wsug_graphics/ws-stats-endpoints.png[scaledwidth="100%"]

For each supported protocol, a tab is shown in this window. Each tab label shows
the number of endpoints captured (e.g. the tab label ``Ethernet &#183; 4'' tells
you that four ethernet endpoints have been captured). If no endpoints of a
specific protocol were captured, the tab label will be greyed out (although the
related page can still be selected).

Each row in the list shows the statistical values for exactly one endpoint.

_Name resolution_ will be done if selected in the window and if it is active for
the specific protocol layer (MAC layer for the selected Ethernet endpoints
page). _Limit to display filter_ will only show conversations matching the
current display filter. Note that in this example we have GeoIP configured which
gives us extra geographic columns. See <<ChGeoIPDbPaths>> for more information.

The button:[Copy] button will copy the list values to the clipboard in CSV
(Comma Separated Values) or YAML format. The button:[Map] button will show the
endpoints mapped in your web browser.

button:[Endpoint Types] lets you choose which traffic type tabs are shown. See
<<ChStatEndpointDefinition>> above for a list of endpoint types. The enabled
types are saved in your profile settings.

[TIP]
====
This window will be updated frequently, so it will be useful even if you open
it before (or while) you are doing a live capture.
====

// Removed:
// [[ChStatEndpointListWindow]]

[[ChStatIOGraphs]]

=== The "IO Graphs" window

User configurable graph of the captured network packets.

You can define up to five differently colored graphs.

.The "IO Graphs" window
image::wsug_graphics/ws-stats-iographs.png[]

The user can configure the following things:

* _Graphs_

  - __Graph 1-5__: enable the specific graph 1-5 (only graph 1 is enabled by default)

  - __Color__: the color of the graph (cannot be changed)

  - __Filter__: a display filter for this graph (only the packets that pass this filter will be taken into account for this graph)

  - __Style__: the style of the graph (Line/Impulse/FBar/Dot)

* _X Axis_

  - __Tick interval__: an interval in x direction lasts (10/1 minutes or 10/1/0.1/0.01/0.001 seconds)

  - __Pixels per tick__: use 10/5/2/1 pixels per tick interval

  - __View as time of day__: option to view x direction labels as time of day instead of seconds or minutes since beginning of capture

* _Y Axis_

  - __Unit__: the unit for the y direction (Packets/Tick, Bytes/Tick, Bits/Tick, Advanced...) [XXX - describe the Advanced feature.]

  - __Scale__: the scale for the y unit (Logarithmic,Auto,10,20,50,100,200,500,...)

The button:[Save] button will save the currently displayed portion of the graph as one
of various file formats.

The button:[Copy] button will copy values from selected graphs to the clipboard in CSV
(Comma Separated Values) format.


[TIP]
====
Click in the graph to select the first package in the selected interval.
====

[[ChStatSRT]]

=== Service Response Time

The service response time is the time between a request and the corresponding
response. This information is available for many protocols.

Service response time statistics are currently available for the following protocols:

* _DCE-RPC_

* _Fibre Channel_

* _H.225 RAS_

* _LDAP_

* _LTE MAC_

* _MGCP_

* _ONC-RPC_

* _SMB_

As an example, the DCE-RPC service response time is described in more detail.

[NOTE]
====
The other Service Response Time windows will work the same way (or only slightly
different) compared to the following description.
====

[[ChStatSRTDceRpc]]

==== The "Service Response Time DCE-RPC" window

The service response time of DCE-RPC is the time between the request and the
corresponding response.

First of all, you have to select the DCE-RPC interface:

.The "Compute DCE-RPC statistics" window
image::wsug_graphics/ws-stats-srt-dcerpc-filter.png[]

You can optionally set a display filter, to reduce the amount of packets.

.The "DCE-RPC Statistic for ..." window
image::wsug_graphics/ws-stats-srt-dcerpc.png[]

Each row corresponds to a method of the interface selected (so the EPM interface
in version 3 has 7 methods). For each method the number of calls, and the
statistics of the SRT time is calculated.

[[ChStatCompareCaptureFiles]]

=== Compare two capture files

Compare two capture files.

This feature works best when you have merged two capture files chronologically,
one from each side of a client/server connection.

The merged capture data is checked for missing packets. If a matching connection
is found it is checked for:

* IP header checksums

* Excessive delay (defined by the "Time variance" setting)

* Packet order

.The "Compare" window
image::wsug_graphics/ws-stats-compare.png[]

You can configure the following:

* _Start compare:_ Start comparing when this many IP IDs are matched. A zero value starts comparing immediately.

* _Stop compare:_ Stop comparing when we can no longer match this many IP IDs. Zero always compares.

* _Endpoint distinction:_ Use MAC addresses or IP time-to-live values to determine connection endpoints.

* _Check order:_ Check for the same IP ID in the previous packet at each end.

* _Time variance:_ Trigger an error if the packet arrives this many milliseconds after the average delay.

* _Filter:_ Limit comparison to packets that match this display filter.

The info column contains new numbering so the same packets are parallel.

The color filtering differentiate the two files from each other. A
``zebra'' effect is create if the Info column is sorted.

[TIP]
====
If you click on an item in the error list its corresponding packet will be
selected in the main window.
====

[[ChStatWLANTraffic]]

=== WLAN Traffic Statistics

Statistics of the captured WLAN traffic. This window will summarize the wireless
network traffic found in the capture. Probe requests will be merged into an
existing network if the SSID matches.

.The "WLAN Traffic Statistics" window
image::wsug_graphics/ws-stats-wlan-traffic.png[]

Each row in the list shows the statistical values for exactly one wireless
network.

_Name resolution_ will be done if selected in the window and if it is active for
the MAC layer.

_Only show existing networks_ will exclude probe requests with a SSID not
matching any network from the list.

The button:[Copy] button will copy the list values to the clipboard in CSV (Comma
Separated Values) format.


[TIP]
====
This window will be updated frequently, so it will be useful, even if you open
it before (or while) you are doing a live capture.
====

[[ChStatXXX]]

=== The protocol specific statistics windows

The protocol specific statistics windows display detailed information of
specific protocols and might be described in a later version of this document.

Some of these statistics are described at
wireshark-wiki-site:[]Statistics.

++++++++++++++++++++++++++++++++++++++
<!-- End of WSUG Chapter Statistics -->
++++++++++++++++++++++++++++++++++++++